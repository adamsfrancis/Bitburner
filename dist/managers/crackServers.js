import { hackingTools } from "/lib/constants";
export async function crackServers(ns, serverMap) {
    const needsCracked = serverMap.filter((server) => server.hasAdminRights === false);
    for (const tool in hackingTools) {
        const toCrackList = needsCracked.filter((server) => server[hackingTools[tool].portFlag] === false);
        if (await ns.fileExists(hackingTools[tool].Program, "home") && toCrackList.length > 0) {
            for (const crackableServer of toCrackList) {
                switch (tool) {
                    case 'ssh':
                        ns.brutessh(crackableServer.hostName);
                        break;
                    case 'ftp':
                        ns.ftpcrack(crackableServer.hostName);
                        break;
                    case 'smtp':
                        ns.relaysmtp(crackableServer.hostName);
                        break;
                    case 'http':
                        ns.httpworm(crackableServer.hostName);
                        break;
                    case 'sql':
                        ns.sqlinject(crackableServer.hostName);
                        break;
                }
            }
        }
    }
    const needsNuked = needsCracked.filter((server) => server.numOpenPortsRequired === 0);
    for (const nukableServer of needsNuked) {
        const nukableName = nukableServer.hostName;
        await ns.nuke(nukableName);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JhY2tTZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21hbmFnZXJzL2NyYWNrU2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFLOUMsTUFBTSxDQUFDLEtBQUssVUFBVSxZQUFZLENBQUMsRUFBTSxFQUFFLFNBQXlCO0lBQ2hFLE1BQU0sWUFBWSxHQUFtQixTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsY0FBYyxLQUFLLEtBQUssQ0FBQyxDQUFDO0lBRW5HLEtBQUssTUFBTSxJQUFJLElBQUksWUFBWSxFQUFFO1FBQzdCLE1BQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFFLE1BQXVCLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDO1FBQ3JILElBQUksTUFBTSxFQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLElBQUksV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDbkYsS0FBSyxNQUFNLGVBQWUsSUFBSSxXQUFXLEVBQUU7Z0JBQ3ZDLFFBQVEsSUFBSSxFQUFFO29CQUNWLEtBQUssS0FBSzt3QkFDTixFQUFFLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDdEMsTUFBTTtvQkFDVixLQUFLLEtBQUs7d0JBQ04sRUFBRSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7d0JBQ3RDLE1BQU07b0JBQ1YsS0FBSyxNQUFNO3dCQUNQLEVBQUUsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUN2QyxNQUFNO29CQUNWLEtBQUssTUFBTTt3QkFDUCxFQUFFLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDdEMsTUFBTTtvQkFDVixLQUFLLEtBQUs7d0JBQ04sRUFBRSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7d0JBQ3ZDLE1BQU07aUJBRWI7YUFFSjtTQUNKO0tBQ0o7SUFDRCxNQUFNLFVBQVUsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdEYsS0FBSyxNQUFNLGFBQWEsSUFBSSxVQUFVLEVBQUU7UUFDcEMsTUFBTSxXQUFXLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUMzQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDOUI7QUFFTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IGhhY2tpbmdUb29scyB9IGZyb20gXCIvbGliL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBzZXJ2ZXJPYmplY3QgfSBmcm9tIFwiL2NsYXNzZXMvY2xhc3NTZXJ2ZXJcIjtcclxuXHJcblxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyYWNrU2VydmVycyhuczogTlMsIHNlcnZlck1hcDogc2VydmVyT2JqZWN0W10pIHtcclxuICAgIGNvbnN0IG5lZWRzQ3JhY2tlZDogc2VydmVyT2JqZWN0W10gPSBzZXJ2ZXJNYXAuZmlsdGVyKChzZXJ2ZXIpID0+IHNlcnZlci5oYXNBZG1pblJpZ2h0cyA9PT0gZmFsc2UpO1xyXG5cclxuICAgIGZvciAoY29uc3QgdG9vbCBpbiBoYWNraW5nVG9vbHMpIHtcclxuICAgICAgICBjb25zdCB0b0NyYWNrTGlzdCA9IG5lZWRzQ3JhY2tlZC5maWx0ZXIoKHNlcnZlcikgPT4gKHNlcnZlciBhcyBzZXJ2ZXJPYmplY3QpW2hhY2tpbmdUb29sc1t0b29sXS5wb3J0RmxhZ10gPT09IGZhbHNlKTtcclxuICAgICAgICBpZiAoYXdhaXQgbnMuZmlsZUV4aXN0cyhoYWNraW5nVG9vbHNbdG9vbF0uUHJvZ3JhbSwgXCJob21lXCIpICYmIHRvQ3JhY2tMaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBjcmFja2FibGVTZXJ2ZXIgb2YgdG9DcmFja0xpc3QpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAodG9vbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NzaCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5zLmJydXRlc3NoKGNyYWNrYWJsZVNlcnZlci5ob3N0TmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Z0cCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5zLmZ0cGNyYWNrKGNyYWNrYWJsZVNlcnZlci5ob3N0TmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NtdHAnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBucy5yZWxheXNtdHAoY3JhY2thYmxlU2VydmVyLmhvc3ROYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaHR0cCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5zLmh0dHB3b3JtKGNyYWNrYWJsZVNlcnZlci5ob3N0TmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NxbCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5zLnNxbGluamVjdChjcmFja2FibGVTZXJ2ZXIuaG9zdE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IG5lZWRzTnVrZWQgPSBuZWVkc0NyYWNrZWQuZmlsdGVyKChzZXJ2ZXIpID0+IHNlcnZlci5udW1PcGVuUG9ydHNSZXF1aXJlZCA9PT0gMCk7XHJcbiAgICBmb3IgKGNvbnN0IG51a2FibGVTZXJ2ZXIgb2YgbmVlZHNOdWtlZCkge1xyXG4gICAgICAgIGNvbnN0IG51a2FibGVOYW1lID0gbnVrYWJsZVNlcnZlci5ob3N0TmFtZTtcclxuICAgICAgICBhd2FpdCBucy5udWtlKG51a2FibGVOYW1lKTtcclxuICAgIH1cclxuXHJcbn0iXX0=