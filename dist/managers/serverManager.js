import { globalFiles } from "/lib/constants";
import { serverObject } from "/classes/classServer";
async function getServerStructure(ns) {
    /** Initial run variable setup, we want to start from "home", and follow the network from there.
     *  Since home is the base level, it's parent will be null. Saving parents for possible backdoor
     *  shennanigans later.
     */
    const startingServer = "home";
    const discoveredServers = new Map();
    discoveredServers.set(startingServer, undefined);
    // Function to recursively discover servers
    async function discoverServers(server) {
        const adjacentServers = ns.scan(server);
        for (const serverName of adjacentServers) {
            if (!discoveredServers.has(serverName)) {
                discoveredServers.set(serverName, server); // Store the server that discovered it
                await discoverServers(serverName); // Recursive call to discover adjacent servers
            }
        }
    }
    await discoverServers(startingServer);
    return discoveredServers;
}
async function getAllServerInfo(ns, serverMap) {
    const allServers = [];
    for (const [currentServer, parentServer] of serverMap) {
        const currentServerInfo = ns.getServer(currentServer);
        const serverObj = new serverObject(currentServerInfo, parentServer);
        allServers.push(serverObj);
    }
    return allServers;
}
async function stringifyServerMap(ns, serverMap) {
    const stringifiedMap = JSON.stringify(serverMap);
    await ns.write(globalFiles.serverMap, stringifiedMap, "w");
}
export async function main(ns) {
    /** Get the server structure */
    // eslint-disable-next-line no-constant-condition
    while (true) {
        const serverStructure = await getServerStructure(ns);
        const serverMap = await getAllServerInfo(ns, serverStructure);
        await stringifyServerMap(ns, serverMap);
        await ns.sleep(1000);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYW5hZ2Vycy9zZXJ2ZXJNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFNcEQsS0FBSyxVQUFVLGtCQUFrQixDQUFDLEVBQUs7SUFDbkM7OztPQUdHO0lBRUgsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDO0lBQzlCLE1BQU0saUJBQWlCLEdBQW1DLElBQUksR0FBRyxFQUFFLENBQUM7SUFDcEUsaUJBQWlCLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUVqRCwyQ0FBMkM7SUFDM0MsS0FBSyxVQUFVLGVBQWUsQ0FBQyxNQUFhO1FBQ3hDLE1BQU0sZUFBZSxHQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFakQsS0FBSyxNQUFNLFVBQVUsSUFBSSxlQUFlLEVBQUU7WUFDMUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDcEMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLHNDQUFzQztnQkFDakYsTUFBTSxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyw4Q0FBOEM7YUFDcEY7U0FDQTtJQUNMLENBQUM7SUFDRCxNQUFNLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN0QyxPQUFPLGlCQUFpQixDQUFDO0FBQzdCLENBQUM7QUFFRCxLQUFLLFVBQVUsZ0JBQWdCLENBQUMsRUFBTSxFQUFFLFNBQTBDO0lBQzlFLE1BQU0sVUFBVSxHQUF3QixFQUFFLENBQUM7SUFFM0MsS0FBSyxNQUFNLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxJQUFJLFNBQVMsRUFBRTtRQUNyRCxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDdEQsTUFBTSxTQUFTLEdBQUcsSUFBSSxZQUFZLENBQUMsaUJBQWlCLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDcEUsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUM1QjtJQUVELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFFRCxLQUFLLFVBQVUsa0JBQWtCLENBQUMsRUFBSyxFQUFDLFNBQXdCO0lBQzlELE1BQU0sY0FBYyxHQUFVLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDeEQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUMsY0FBYyxFQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFNSCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFLO0lBQzVCLCtCQUErQjtJQUMvQixpREFBaUQ7SUFDakQsT0FBTSxJQUFJLEVBQUM7UUFDUCxNQUFNLGVBQWUsR0FBa0MsTUFBTSxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNwRixNQUFNLFNBQVMsR0FBRyxNQUFNLGdCQUFnQixDQUFDLEVBQUUsRUFBQyxlQUFlLENBQUMsQ0FBQztRQUM3RCxNQUFNLGtCQUFrQixDQUFDLEVBQUUsRUFBQyxTQUFTLENBQUMsQ0FBQztRQUV2QyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDeEI7QUFFTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5pbXBvcnQgeyBnbG9iYWxGaWxlcyB9IGZyb20gXCIvbGliL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBzZXJ2ZXJPYmplY3QgfSBmcm9tIFwiL2NsYXNzZXMvY2xhc3NTZXJ2ZXJcIjtcclxuXHJcblxyXG5cclxuXHJcblxyXG5hc3luYyBmdW5jdGlvbiBnZXRTZXJ2ZXJTdHJ1Y3R1cmUobnM6TlMpOlByb21pc2U8TWFwPHN0cmluZywgc3RyaW5nIHwgdW5kZWZpbmVkPj4ge1xyXG4gICAgLyoqIEluaXRpYWwgcnVuIHZhcmlhYmxlIHNldHVwLCB3ZSB3YW50IHRvIHN0YXJ0IGZyb20gXCJob21lXCIsIGFuZCBmb2xsb3cgdGhlIG5ldHdvcmsgZnJvbSB0aGVyZS5cclxuICAgICAqICBTaW5jZSBob21lIGlzIHRoZSBiYXNlIGxldmVsLCBpdCdzIHBhcmVudCB3aWxsIGJlIG51bGwuIFNhdmluZyBwYXJlbnRzIGZvciBwb3NzaWJsZSBiYWNrZG9vclxyXG4gICAgICogIHNoZW5uYW5pZ2FucyBsYXRlci5cclxuICAgICAqL1xyXG5cclxuICAgIGNvbnN0IHN0YXJ0aW5nU2VydmVyID0gXCJob21lXCI7XHJcbiAgICBjb25zdCBkaXNjb3ZlcmVkU2VydmVyczpNYXA8c3RyaW5nLHN0cmluZyB8ICB1bmRlZmluZWQ+ID0gbmV3IE1hcCgpO1xyXG4gICAgZGlzY292ZXJlZFNlcnZlcnMuc2V0KHN0YXJ0aW5nU2VydmVyLCB1bmRlZmluZWQpO1xyXG5cclxuICAgIC8vIEZ1bmN0aW9uIHRvIHJlY3Vyc2l2ZWx5IGRpc2NvdmVyIHNlcnZlcnNcclxuICAgIGFzeW5jIGZ1bmN0aW9uIGRpc2NvdmVyU2VydmVycyhzZXJ2ZXI6c3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgYWRqYWNlbnRTZXJ2ZXJzOnN0cmluZ1tdID0gbnMuc2NhbihzZXJ2ZXIpO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IHNlcnZlck5hbWUgb2YgYWRqYWNlbnRTZXJ2ZXJzKSB7XHJcbiAgICAgICAgaWYgKCFkaXNjb3ZlcmVkU2VydmVycy5oYXMoc2VydmVyTmFtZSkpIHtcclxuICAgICAgICAgICAgZGlzY292ZXJlZFNlcnZlcnMuc2V0KHNlcnZlck5hbWUsIHNlcnZlcik7IC8vIFN0b3JlIHRoZSBzZXJ2ZXIgdGhhdCBkaXNjb3ZlcmVkIGl0XHJcbiAgICAgICAgICAgIGF3YWl0IGRpc2NvdmVyU2VydmVycyhzZXJ2ZXJOYW1lKTsgLy8gUmVjdXJzaXZlIGNhbGwgdG8gZGlzY292ZXIgYWRqYWNlbnQgc2VydmVyc1xyXG4gICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhd2FpdCBkaXNjb3ZlclNlcnZlcnMoc3RhcnRpbmdTZXJ2ZXIpO1xyXG4gICAgcmV0dXJuIGRpc2NvdmVyZWRTZXJ2ZXJzO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBnZXRBbGxTZXJ2ZXJJbmZvKG5zOiBOUywgc2VydmVyTWFwOiBNYXA8c3RyaW5nLCBzdHJpbmcgfCB1bmRlZmluZWQ+KTpQcm9taXNlPEFycmF5PHNlcnZlck9iamVjdD4+IHtcclxuICAgIGNvbnN0IGFsbFNlcnZlcnM6IEFycmF5PHNlcnZlck9iamVjdD4gPSBbXTtcclxuICBcclxuICAgIGZvciAoY29uc3QgW2N1cnJlbnRTZXJ2ZXIsIHBhcmVudFNlcnZlcl0gb2Ygc2VydmVyTWFwKSB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRTZXJ2ZXJJbmZvID0gbnMuZ2V0U2VydmVyKGN1cnJlbnRTZXJ2ZXIpO1xyXG4gICAgICBjb25zdCBzZXJ2ZXJPYmogPSBuZXcgc2VydmVyT2JqZWN0KGN1cnJlbnRTZXJ2ZXJJbmZvLCBwYXJlbnRTZXJ2ZXIpO1xyXG4gICAgICBhbGxTZXJ2ZXJzLnB1c2goc2VydmVyT2JqKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYWxsU2VydmVycztcclxuICB9XHJcbiAgXHJcbiAgYXN5bmMgZnVuY3Rpb24gc3RyaW5naWZ5U2VydmVyTWFwKG5zOk5TLHNlcnZlck1hcDpzZXJ2ZXJPYmplY3RbXSkge1xyXG4gICAgY29uc3Qgc3RyaW5naWZpZWRNYXA6c3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoc2VydmVyTWFwKTtcclxuICAgIGF3YWl0IG5zLndyaXRlKGdsb2JhbEZpbGVzLnNlcnZlck1hcCxzdHJpbmdpZmllZE1hcCxcIndcIik7XHJcbiAgfVxyXG4gIFxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6TlMpIHtcclxuICAgIC8qKiBHZXQgdGhlIHNlcnZlciBzdHJ1Y3R1cmUgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgIHdoaWxlKHRydWUpe1xyXG4gICAgICAgIGNvbnN0IHNlcnZlclN0cnVjdHVyZTpNYXA8c3RyaW5nLHN0cmluZyB8IHVuZGVmaW5lZD4gPSBhd2FpdCBnZXRTZXJ2ZXJTdHJ1Y3R1cmUobnMpO1xyXG4gICAgICAgIGNvbnN0IHNlcnZlck1hcCA9IGF3YWl0IGdldEFsbFNlcnZlckluZm8obnMsc2VydmVyU3RydWN0dXJlKTtcclxuICAgICAgICBhd2FpdCBzdHJpbmdpZnlTZXJ2ZXJNYXAobnMsc2VydmVyTWFwKTtcclxuXHJcbiAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwMCk7XHJcbiAgICB9XHJcbiAgICBcclxufSJdfQ==