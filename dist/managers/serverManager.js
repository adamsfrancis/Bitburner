import { globalFiles } from "/lib/constants";
import { serverObject } from "/classes/classServer";
import { stringifyAndWrite } from "/lib/helpers";
/** Theoretical RAM Cost: 3.8 GB */
/** @remarks RAM: 0.2 GB */
async function getServerStructure(ns) {
    /** Initial run variable setup, we want to start from "home", and follow the network from there.
     *  Since home is the base level, it's parent will be null. Saving parents for possible backdoor
     *  shennanigans later.
     */
    const startingServer = "home";
    const discoveredServers = new Map();
    discoveredServers.set(startingServer, undefined);
    // Function to recursively discover servers
    async function discoverServers(server) {
        const adjacentServers = ns.scan(server);
        for (const serverName of adjacentServers) {
            if (!discoveredServers.has(serverName)) {
                discoveredServers.set(serverName, server); // Store the server that discovered it
                await discoverServers(serverName); // Recursive call to discover adjacent servers
            }
        }
    }
    await discoverServers(startingServer);
    return discoveredServers;
}
/** RAM: 2 GB */
async function getAllServerInfo(ns, serverMap) {
    const allServers = [];
    for (const [currentServer, parentServer] of serverMap) {
        const currentServerInfo = ns.getServer(currentServer);
        const serverObj = new serverObject(currentServerInfo, parentServer);
        allServers.push(serverObj);
    }
    return allServers;
}
/** RAM: 0 GB */
async function storeServerData(ns, serverData, filePath) {
    await stringifyAndWrite(ns, serverData, filePath);
}
export async function main(ns) {
    /** Get the server structure */
    const serverStructure = await getServerStructure(ns);
    const serverMap = await getAllServerInfo(ns, serverStructure);
    await storeServerData(ns, serverMap, globalFiles.serverMap);
    /** Now we have all servers and their current information, now let's make the lists
     * of those that need cracking.
     */
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYW5hZ2Vycy9zZXJ2ZXJNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRWpELG1DQUFtQztBQUduQywyQkFBMkI7QUFDM0IsS0FBSyxVQUFVLGtCQUFrQixDQUFDLEVBQUs7SUFDbkM7OztPQUdHO0lBRUgsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDO0lBQzlCLE1BQU0saUJBQWlCLEdBQW1DLElBQUksR0FBRyxFQUFFLENBQUM7SUFDcEUsaUJBQWlCLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUVqRCwyQ0FBMkM7SUFDM0MsS0FBSyxVQUFVLGVBQWUsQ0FBQyxNQUFhO1FBQ3hDLE1BQU0sZUFBZSxHQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFakQsS0FBSyxNQUFNLFVBQVUsSUFBSSxlQUFlLEVBQUU7WUFDMUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDcEMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLHNDQUFzQztnQkFDakYsTUFBTSxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyw4Q0FBOEM7YUFDcEY7U0FDQTtJQUNMLENBQUM7SUFDRCxNQUFNLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN0QyxPQUFPLGlCQUFpQixDQUFDO0FBQzdCLENBQUM7QUFFRCxnQkFBZ0I7QUFDaEIsS0FBSyxVQUFVLGdCQUFnQixDQUFDLEVBQU0sRUFBRSxTQUEwQztJQUM5RSxNQUFNLFVBQVUsR0FBd0IsRUFBRSxDQUFDO0lBRTNDLEtBQUssTUFBTSxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsSUFBSSxTQUFTLEVBQUU7UUFDckQsTUFBTSxpQkFBaUIsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sU0FBUyxHQUFHLElBQUksWUFBWSxDQUFDLGlCQUFpQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3BFLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDNUI7SUFFRCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDO0FBRUQsZ0JBQWdCO0FBQ2hCLEtBQUssVUFBVSxlQUFlLENBQUMsRUFBSyxFQUFDLFVBQWlCLEVBQUMsUUFBZTtJQUNwRSxNQUFNLGlCQUFpQixDQUFDLEVBQUUsRUFBQyxVQUFVLEVBQUMsUUFBUSxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQU1ILE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUs7SUFDNUIsK0JBQStCO0lBQy9CLE1BQU0sZUFBZSxHQUFrQyxNQUFNLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BGLE1BQU0sU0FBUyxHQUFHLE1BQU0sZ0JBQWdCLENBQUMsRUFBRSxFQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzdELE1BQU0sZUFBZSxDQUFDLEVBQUUsRUFBQyxTQUFTLEVBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTFEOztPQUVHO0FBRVAsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5pbXBvcnQgeyBnbG9iYWxGaWxlcyB9IGZyb20gXCIvbGliL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBzZXJ2ZXJPYmplY3QgfSBmcm9tIFwiL2NsYXNzZXMvY2xhc3NTZXJ2ZXJcIjtcclxuaW1wb3J0IHsgc3RyaW5naWZ5QW5kV3JpdGUgfSBmcm9tIFwiL2xpYi9oZWxwZXJzXCI7XHJcblxyXG4vKiogVGhlb3JldGljYWwgUkFNIENvc3Q6IDMuOCBHQiAqL1xyXG5cclxuXHJcbi8qKiBAcmVtYXJrcyBSQU06IDAuMiBHQiAqL1xyXG5hc3luYyBmdW5jdGlvbiBnZXRTZXJ2ZXJTdHJ1Y3R1cmUobnM6TlMpOlByb21pc2U8TWFwPHN0cmluZywgc3RyaW5nIHwgdW5kZWZpbmVkPj4ge1xyXG4gICAgLyoqIEluaXRpYWwgcnVuIHZhcmlhYmxlIHNldHVwLCB3ZSB3YW50IHRvIHN0YXJ0IGZyb20gXCJob21lXCIsIGFuZCBmb2xsb3cgdGhlIG5ldHdvcmsgZnJvbSB0aGVyZS5cclxuICAgICAqICBTaW5jZSBob21lIGlzIHRoZSBiYXNlIGxldmVsLCBpdCdzIHBhcmVudCB3aWxsIGJlIG51bGwuIFNhdmluZyBwYXJlbnRzIGZvciBwb3NzaWJsZSBiYWNrZG9vclxyXG4gICAgICogIHNoZW5uYW5pZ2FucyBsYXRlci5cclxuICAgICAqL1xyXG5cclxuICAgIGNvbnN0IHN0YXJ0aW5nU2VydmVyID0gXCJob21lXCI7XHJcbiAgICBjb25zdCBkaXNjb3ZlcmVkU2VydmVyczpNYXA8c3RyaW5nLHN0cmluZyB8ICB1bmRlZmluZWQ+ID0gbmV3IE1hcCgpO1xyXG4gICAgZGlzY292ZXJlZFNlcnZlcnMuc2V0KHN0YXJ0aW5nU2VydmVyLCB1bmRlZmluZWQpO1xyXG5cclxuICAgIC8vIEZ1bmN0aW9uIHRvIHJlY3Vyc2l2ZWx5IGRpc2NvdmVyIHNlcnZlcnNcclxuICAgIGFzeW5jIGZ1bmN0aW9uIGRpc2NvdmVyU2VydmVycyhzZXJ2ZXI6c3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgYWRqYWNlbnRTZXJ2ZXJzOnN0cmluZ1tdID0gbnMuc2NhbihzZXJ2ZXIpO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IHNlcnZlck5hbWUgb2YgYWRqYWNlbnRTZXJ2ZXJzKSB7XHJcbiAgICAgICAgaWYgKCFkaXNjb3ZlcmVkU2VydmVycy5oYXMoc2VydmVyTmFtZSkpIHtcclxuICAgICAgICAgICAgZGlzY292ZXJlZFNlcnZlcnMuc2V0KHNlcnZlck5hbWUsIHNlcnZlcik7IC8vIFN0b3JlIHRoZSBzZXJ2ZXIgdGhhdCBkaXNjb3ZlcmVkIGl0XHJcbiAgICAgICAgICAgIGF3YWl0IGRpc2NvdmVyU2VydmVycyhzZXJ2ZXJOYW1lKTsgLy8gUmVjdXJzaXZlIGNhbGwgdG8gZGlzY292ZXIgYWRqYWNlbnQgc2VydmVyc1xyXG4gICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhd2FpdCBkaXNjb3ZlclNlcnZlcnMoc3RhcnRpbmdTZXJ2ZXIpO1xyXG4gICAgcmV0dXJuIGRpc2NvdmVyZWRTZXJ2ZXJzO1xyXG59XHJcblxyXG4vKiogUkFNOiAyIEdCICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdldEFsbFNlcnZlckluZm8obnM6IE5TLCBzZXJ2ZXJNYXA6IE1hcDxzdHJpbmcsIHN0cmluZyB8IHVuZGVmaW5lZD4pOlByb21pc2U8QXJyYXk8c2VydmVyT2JqZWN0Pj4ge1xyXG4gICAgY29uc3QgYWxsU2VydmVyczogQXJyYXk8c2VydmVyT2JqZWN0PiA9IFtdO1xyXG4gIFxyXG4gICAgZm9yIChjb25zdCBbY3VycmVudFNlcnZlciwgcGFyZW50U2VydmVyXSBvZiBzZXJ2ZXJNYXApIHtcclxuICAgICAgY29uc3QgY3VycmVudFNlcnZlckluZm8gPSBucy5nZXRTZXJ2ZXIoY3VycmVudFNlcnZlcik7XHJcbiAgICAgIGNvbnN0IHNlcnZlck9iaiA9IG5ldyBzZXJ2ZXJPYmplY3QoY3VycmVudFNlcnZlckluZm8sIHBhcmVudFNlcnZlcik7XHJcbiAgICAgIGFsbFNlcnZlcnMucHVzaChzZXJ2ZXJPYmopO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhbGxTZXJ2ZXJzO1xyXG4gIH1cclxuICBcclxuICAvKiogUkFNOiAwIEdCICovXHJcbiAgYXN5bmMgZnVuY3Rpb24gc3RvcmVTZXJ2ZXJEYXRhKG5zOk5TLHNlcnZlckRhdGE6b2JqZWN0LGZpbGVQYXRoOnN0cmluZyk6UHJvbWlzZTx2b2lkPiB7XHJcbiAgICBhd2FpdCBzdHJpbmdpZnlBbmRXcml0ZShucyxzZXJ2ZXJEYXRhLGZpbGVQYXRoKTtcclxuICB9XHJcbiAgXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczpOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgLyoqIEdldCB0aGUgc2VydmVyIHN0cnVjdHVyZSAqL1xyXG4gICAgY29uc3Qgc2VydmVyU3RydWN0dXJlOk1hcDxzdHJpbmcsc3RyaW5nIHwgdW5kZWZpbmVkPiA9IGF3YWl0IGdldFNlcnZlclN0cnVjdHVyZShucyk7XHJcbiAgICBjb25zdCBzZXJ2ZXJNYXAgPSBhd2FpdCBnZXRBbGxTZXJ2ZXJJbmZvKG5zLHNlcnZlclN0cnVjdHVyZSk7XHJcbiAgICBhd2FpdCBzdG9yZVNlcnZlckRhdGEobnMsc2VydmVyTWFwLGdsb2JhbEZpbGVzLnNlcnZlck1hcCk7XHJcblxyXG4gICAgLyoqIE5vdyB3ZSBoYXZlIGFsbCBzZXJ2ZXJzIGFuZCB0aGVpciBjdXJyZW50IGluZm9ybWF0aW9uLCBub3cgbGV0J3MgbWFrZSB0aGUgbGlzdHNcclxuICAgICAqIG9mIHRob3NlIHRoYXQgbmVlZCBjcmFja2luZy5cclxuICAgICAqL1xyXG4gICAgXHJcbn0iXX0=