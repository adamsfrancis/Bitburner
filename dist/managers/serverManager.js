import { globalFiles } from "/lib/constants";
import { serverObject } from "/classes/classServer";
import { stringifyAndWrite } from "/lib/helpers";
import { allProgressFlagsTrue, crackServers } from "/managers/serverManagement/crackServers";
import { allServersRooted, rootWhatWeCan } from "/managers/serverManagement/rootServers";
/** Theoretical RAM Cost: 3.8 GB */
/** @RAM 0.2 GB */
async function getServerStructure(ns) {
    /** Initial run variable setup, we want to start from "home", and follow the network from there.
     *  Since home is the base level, it's parent will be null. Saving parents for possible backdoor
     *  shennanigans later.
     */
    const startingServer = "home";
    const discoveredServers = new Map();
    discoveredServers.set(startingServer, undefined);
    // Function to recursively discover servers
    async function discoverServers(server) {
        const adjacentServers = ns.scan(server);
        for (const serverName of adjacentServers) {
            if (!discoveredServers.has(serverName)) {
                discoveredServers.set(serverName, server); // Store the server that discovered it
                await discoverServers(serverName); // Recursive call to discover adjacent servers
            }
        }
    }
    await discoverServers(startingServer);
    return discoveredServers;
}
/** @RAM 2 GB */
async function getAllServerInfo(ns, serverMap) {
    const allServers = [];
    for (const [currentServer, parentServer] of serverMap) {
        const currentServerInfo = ns.getServer(currentServer);
        const serverObj = new serverObject(currentServerInfo, parentServer);
        allServers.push(serverObj);
    }
    return allServers;
}
/** @RAM 0 GB */
async function storeServerData(ns, serverData, filePath) {
    await stringifyAndWrite(ns, serverData, filePath);
}
/** @RAM 2.2 GB */
export async function updateServerMap(ns) {
    const serverStructure = await getServerStructure(ns);
    const serverMap = await getAllServerInfo(ns, serverStructure);
    await storeServerData(ns, serverMap, globalFiles.serverMap);
}
export async function main(ns) {
    /** Get the server structure, and update the serverMap */
    await updateServerMap(ns);
    ns.tprint("Server Map Updated.");
    /** See if all servers are cracked, if not, crack what we can. Later we'll incorporate buying missing tools. */
    if (!allProgressFlagsTrue(ns)) {
        crackServers(ns);
    }
    ns.tprint("Progress Flags Updated");
    /** Next, let's see what we need to root, and root if possible. */
    if (!allServersRooted(ns)) {
        await rootWhatWeCan(ns);
    }
    ns.tprint("Servers rooted.");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYW5hZ2Vycy9zZXJ2ZXJNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2pELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxZQUFZLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUM3RixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFFekYsbUNBQW1DO0FBR25DLGtCQUFrQjtBQUNsQixLQUFLLFVBQVUsa0JBQWtCLENBQUMsRUFBSztJQUNuQzs7O09BR0c7SUFFSCxNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUM7SUFDOUIsTUFBTSxpQkFBaUIsR0FBbUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNwRSxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRWpELDJDQUEyQztJQUMzQyxLQUFLLFVBQVUsZUFBZSxDQUFDLE1BQWE7UUFDeEMsTUFBTSxlQUFlLEdBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVqRCxLQUFLLE1BQU0sVUFBVSxJQUFJLGVBQWUsRUFBRTtZQUMxQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUNwQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsc0NBQXNDO2dCQUNqRixNQUFNLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLDhDQUE4QzthQUNwRjtTQUNBO0lBQ0wsQ0FBQztJQUNELE1BQU0sZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3RDLE9BQU8saUJBQWlCLENBQUM7QUFDN0IsQ0FBQztBQUVELGdCQUFnQjtBQUNoQixLQUFLLFVBQVUsZ0JBQWdCLENBQUMsRUFBTSxFQUFFLFNBQTBDO0lBQzlFLE1BQU0sVUFBVSxHQUF3QixFQUFFLENBQUM7SUFFM0MsS0FBSyxNQUFNLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxJQUFJLFNBQVMsRUFBRTtRQUNyRCxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDdEQsTUFBTSxTQUFTLEdBQUcsSUFBSSxZQUFZLENBQUMsaUJBQWlCLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDcEUsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUM1QjtJQUVELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFFRCxnQkFBZ0I7QUFDaEIsS0FBSyxVQUFVLGVBQWUsQ0FBQyxFQUFLLEVBQUMsVUFBaUIsRUFBQyxRQUFlO0lBQ3BFLE1BQU0saUJBQWlCLENBQUMsRUFBRSxFQUFDLFVBQVUsRUFBQyxRQUFRLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBRUQsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsZUFBZSxDQUFDLEVBQUs7SUFDekMsTUFBTSxlQUFlLEdBQWtDLE1BQU0sa0JBQWtCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEYsTUFBTSxTQUFTLEdBQUcsTUFBTSxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUMsZUFBZSxDQUFDLENBQUM7SUFDN0QsTUFBTSxlQUFlLENBQUMsRUFBRSxFQUFDLFNBQVMsRUFBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQU1ILE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUs7SUFDNUIseURBQXlEO0lBQ3pELE1BQU0sZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzFCLEVBQUUsQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQTtJQUVoQywrR0FBK0c7SUFDL0csSUFBRyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxFQUFDO1FBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQUM7SUFDaEQsRUFBRSxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO0lBRW5DLGtFQUFrRTtJQUNsRSxJQUFHLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLEVBQUM7UUFBQyxNQUFNLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUFDO0lBQ25ELEVBQUUsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtBQUNoQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IGdsb2JhbEZpbGVzIH0gZnJvbSBcIi9saWIvY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IHNlcnZlck9iamVjdCB9IGZyb20gXCIvY2xhc3Nlcy9jbGFzc1NlcnZlclwiO1xyXG5pbXBvcnQgeyBzdHJpbmdpZnlBbmRXcml0ZSB9IGZyb20gXCIvbGliL2hlbHBlcnNcIjtcclxuaW1wb3J0IHsgYWxsUHJvZ3Jlc3NGbGFnc1RydWUsIGNyYWNrU2VydmVycyB9IGZyb20gXCIvbWFuYWdlcnMvc2VydmVyTWFuYWdlbWVudC9jcmFja1NlcnZlcnNcIjtcclxuaW1wb3J0IHsgYWxsU2VydmVyc1Jvb3RlZCwgcm9vdFdoYXRXZUNhbiB9IGZyb20gXCIvbWFuYWdlcnMvc2VydmVyTWFuYWdlbWVudC9yb290U2VydmVyc1wiO1xyXG5cclxuLyoqIFRoZW9yZXRpY2FsIFJBTSBDb3N0OiAzLjggR0IgKi9cclxuXHJcblxyXG4vKiogQFJBTSAwLjIgR0IgKi9cclxuYXN5bmMgZnVuY3Rpb24gZ2V0U2VydmVyU3RydWN0dXJlKG5zOk5TKTpQcm9taXNlPE1hcDxzdHJpbmcsIHN0cmluZyB8IHVuZGVmaW5lZD4+IHtcclxuICAgIC8qKiBJbml0aWFsIHJ1biB2YXJpYWJsZSBzZXR1cCwgd2Ugd2FudCB0byBzdGFydCBmcm9tIFwiaG9tZVwiLCBhbmQgZm9sbG93IHRoZSBuZXR3b3JrIGZyb20gdGhlcmUuXHJcbiAgICAgKiAgU2luY2UgaG9tZSBpcyB0aGUgYmFzZSBsZXZlbCwgaXQncyBwYXJlbnQgd2lsbCBiZSBudWxsLiBTYXZpbmcgcGFyZW50cyBmb3IgcG9zc2libGUgYmFja2Rvb3JcclxuICAgICAqICBzaGVubmFuaWdhbnMgbGF0ZXIuXHJcbiAgICAgKi9cclxuXHJcbiAgICBjb25zdCBzdGFydGluZ1NlcnZlciA9IFwiaG9tZVwiO1xyXG4gICAgY29uc3QgZGlzY292ZXJlZFNlcnZlcnM6TWFwPHN0cmluZyxzdHJpbmcgfCAgdW5kZWZpbmVkPiA9IG5ldyBNYXAoKTtcclxuICAgIGRpc2NvdmVyZWRTZXJ2ZXJzLnNldChzdGFydGluZ1NlcnZlciwgdW5kZWZpbmVkKTtcclxuXHJcbiAgICAvLyBGdW5jdGlvbiB0byByZWN1cnNpdmVseSBkaXNjb3ZlciBzZXJ2ZXJzXHJcbiAgICBhc3luYyBmdW5jdGlvbiBkaXNjb3ZlclNlcnZlcnMoc2VydmVyOnN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IGFkamFjZW50U2VydmVyczpzdHJpbmdbXSA9IG5zLnNjYW4oc2VydmVyKTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBzZXJ2ZXJOYW1lIG9mIGFkamFjZW50U2VydmVycykge1xyXG4gICAgICAgIGlmICghZGlzY292ZXJlZFNlcnZlcnMuaGFzKHNlcnZlck5hbWUpKSB7XHJcbiAgICAgICAgICAgIGRpc2NvdmVyZWRTZXJ2ZXJzLnNldChzZXJ2ZXJOYW1lLCBzZXJ2ZXIpOyAvLyBTdG9yZSB0aGUgc2VydmVyIHRoYXQgZGlzY292ZXJlZCBpdFxyXG4gICAgICAgICAgICBhd2FpdCBkaXNjb3ZlclNlcnZlcnMoc2VydmVyTmFtZSk7IC8vIFJlY3Vyc2l2ZSBjYWxsIHRvIGRpc2NvdmVyIGFkamFjZW50IHNlcnZlcnNcclxuICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYXdhaXQgZGlzY292ZXJTZXJ2ZXJzKHN0YXJ0aW5nU2VydmVyKTtcclxuICAgIHJldHVybiBkaXNjb3ZlcmVkU2VydmVycztcclxufVxyXG5cclxuLyoqIEBSQU0gMiBHQiAqL1xyXG5hc3luYyBmdW5jdGlvbiBnZXRBbGxTZXJ2ZXJJbmZvKG5zOiBOUywgc2VydmVyTWFwOiBNYXA8c3RyaW5nLCBzdHJpbmcgfCB1bmRlZmluZWQ+KTpQcm9taXNlPEFycmF5PHNlcnZlck9iamVjdD4+IHtcclxuICAgIGNvbnN0IGFsbFNlcnZlcnM6IEFycmF5PHNlcnZlck9iamVjdD4gPSBbXTtcclxuICBcclxuICAgIGZvciAoY29uc3QgW2N1cnJlbnRTZXJ2ZXIsIHBhcmVudFNlcnZlcl0gb2Ygc2VydmVyTWFwKSB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRTZXJ2ZXJJbmZvID0gbnMuZ2V0U2VydmVyKGN1cnJlbnRTZXJ2ZXIpO1xyXG4gICAgICBjb25zdCBzZXJ2ZXJPYmogPSBuZXcgc2VydmVyT2JqZWN0KGN1cnJlbnRTZXJ2ZXJJbmZvLCBwYXJlbnRTZXJ2ZXIpO1xyXG4gICAgICBhbGxTZXJ2ZXJzLnB1c2goc2VydmVyT2JqKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYWxsU2VydmVycztcclxuICB9XHJcbiAgXHJcbiAgLyoqIEBSQU0gMCBHQiAqL1xyXG4gIGFzeW5jIGZ1bmN0aW9uIHN0b3JlU2VydmVyRGF0YShuczpOUyxzZXJ2ZXJEYXRhOm9iamVjdCxmaWxlUGF0aDpzdHJpbmcpOlByb21pc2U8dm9pZD4ge1xyXG4gICAgYXdhaXQgc3RyaW5naWZ5QW5kV3JpdGUobnMsc2VydmVyRGF0YSxmaWxlUGF0aCk7XHJcbiAgfVxyXG5cclxuICAvKiogQFJBTSAyLjIgR0IgKi9cclxuICBleHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlU2VydmVyTWFwKG5zOk5TKTpQcm9taXNlPHZvaWQ+e1xyXG4gICAgY29uc3Qgc2VydmVyU3RydWN0dXJlOk1hcDxzdHJpbmcsc3RyaW5nIHwgdW5kZWZpbmVkPiA9IGF3YWl0IGdldFNlcnZlclN0cnVjdHVyZShucyk7XHJcbiAgICBjb25zdCBzZXJ2ZXJNYXAgPSBhd2FpdCBnZXRBbGxTZXJ2ZXJJbmZvKG5zLHNlcnZlclN0cnVjdHVyZSk7XHJcbiAgICBhd2FpdCBzdG9yZVNlcnZlckRhdGEobnMsc2VydmVyTWFwLGdsb2JhbEZpbGVzLnNlcnZlck1hcCk7XHJcbiAgfVxyXG4gIFxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6TlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIC8qKiBHZXQgdGhlIHNlcnZlciBzdHJ1Y3R1cmUsIGFuZCB1cGRhdGUgdGhlIHNlcnZlck1hcCAqL1xyXG4gICAgYXdhaXQgdXBkYXRlU2VydmVyTWFwKG5zKTtcclxuICAgIG5zLnRwcmludChcIlNlcnZlciBNYXAgVXBkYXRlZC5cIilcclxuXHJcbiAgICAvKiogU2VlIGlmIGFsbCBzZXJ2ZXJzIGFyZSBjcmFja2VkLCBpZiBub3QsIGNyYWNrIHdoYXQgd2UgY2FuLiBMYXRlciB3ZSdsbCBpbmNvcnBvcmF0ZSBidXlpbmcgbWlzc2luZyB0b29scy4gKi9cclxuICAgIGlmKCFhbGxQcm9ncmVzc0ZsYWdzVHJ1ZShucykpe2NyYWNrU2VydmVycyhucyk7fVxyXG4gICAgbnMudHByaW50KFwiUHJvZ3Jlc3MgRmxhZ3MgVXBkYXRlZFwiKVxyXG5cclxuICAgIC8qKiBOZXh0LCBsZXQncyBzZWUgd2hhdCB3ZSBuZWVkIHRvIHJvb3QsIGFuZCByb290IGlmIHBvc3NpYmxlLiAqL1xyXG4gICAgaWYoIWFsbFNlcnZlcnNSb290ZWQobnMpKXthd2FpdCByb290V2hhdFdlQ2FuKG5zKTt9XHJcbiAgICBucy50cHJpbnQoXCJTZXJ2ZXJzIHJvb3RlZC5cIilcclxufSJdfQ==