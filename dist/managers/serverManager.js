import { globalFiles } from "/lib/constants";
import { serverObject } from "/classes/classServer";
import { stringifyAndWrite } from "/lib/helpers";
import { allProgressFlagsTrue, crackServers } from "/managers/serverManagement/crackServers";
import { allServersRooted, rootWhatWeCan } from "/managers/serverManagement/rootServers";
/** Theoretical RAM Cost: 3.8 GB */
/** @RAM 0.2 GB */
export async function getServerStructure(ns) {
    /** Initial run variable setup, we want to start from "home", and follow the network from there.
     *  Since home is the base level, it's parent will be null. Saving parents for possible backdoor
     *  shennanigans later.
     */
    const startingServer = "home";
    const discoveredServers = new Map();
    discoveredServers.set(startingServer, undefined);
    // Function to recursively discover servers
    async function discoverServers(server) {
        const adjacentServers = ns.scan(server);
        for (const serverName of adjacentServers) {
            if (!discoveredServers.has(serverName)) {
                discoveredServers.set(serverName, server); // Store the server that discovered it
                await discoverServers(serverName); // Recursive call to discover adjacent servers
            }
        }
    }
    await discoverServers(startingServer);
    return discoveredServers;
}
/** @RAM 2 GB */
export async function getAllServerInfo(ns, serverMap) {
    const allServers = [];
    for (const [currentServer, parentServer] of serverMap) {
        const currentServerInfo = ns.getServer(currentServer);
        const serverObj = new serverObject(currentServerInfo, parentServer);
        allServers.push(serverObj);
    }
    return allServers;
}
/** @RAM 0 GB */
export async function storeServerData(ns, serverData, filePath) {
    await stringifyAndWrite(ns, serverData, filePath);
}
/** @RAM 2.2 GB */
export async function updateServerMap(ns) {
    const serverStructure = await getServerStructure(ns);
    const serverMap = await getAllServerInfo(ns, serverStructure);
    await storeServerData(ns, serverMap, globalFiles.serverMap);
}
export async function main(ns) {
    /** Get the server structure, and update the serverMap */
    const time1 = new Date();
    await updateServerMap(ns);
    const time2 = new Date();
    const timeDifference = +time2 - +time1;
    ns.tprint("Server Map Updated in " + timeDifference + " ms");
    /** See if all servers are cracked, if not, crack what we can. Later we'll incorporate buying missing tools. */
    if (!await allProgressFlagsTrue(ns)) {
        await crackServers(ns);
    }
    ns.tprint("Progress Flags Updated");
    /** Next, let's see what we need to root, and root if possible. */
    if (!await allServersRooted(ns)) {
        await rootWhatWeCan(ns);
    }
    ns.tprint("Servers rooted.");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYW5hZ2Vycy9zZXJ2ZXJNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2pELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxZQUFZLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUM3RixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFFekYsbUNBQW1DO0FBR25DLGtCQUFrQjtBQUNsQixNQUFNLENBQUMsS0FBSyxVQUFVLGtCQUFrQixDQUFDLEVBQUs7SUFDMUM7OztPQUdHO0lBRUgsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDO0lBQzlCLE1BQU0saUJBQWlCLEdBQW1DLElBQUksR0FBRyxFQUFFLENBQUM7SUFDcEUsaUJBQWlCLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUVqRCwyQ0FBMkM7SUFDM0MsS0FBSyxVQUFVLGVBQWUsQ0FBQyxNQUFhO1FBQ3hDLE1BQU0sZUFBZSxHQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFakQsS0FBSyxNQUFNLFVBQVUsSUFBSSxlQUFlLEVBQUU7WUFDMUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDcEMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLHNDQUFzQztnQkFDakYsTUFBTSxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyw4Q0FBOEM7YUFDcEY7U0FDQTtJQUNMLENBQUM7SUFDRCxNQUFNLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN0QyxPQUFPLGlCQUFpQixDQUFDO0FBQzdCLENBQUM7QUFFRCxnQkFBZ0I7QUFDaEIsTUFBTSxDQUFDLEtBQUssVUFBVSxnQkFBZ0IsQ0FBQyxFQUFNLEVBQUUsU0FBMEM7SUFDckYsTUFBTSxVQUFVLEdBQXdCLEVBQUUsQ0FBQztJQUUzQyxLQUFLLE1BQU0sQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLElBQUksU0FBUyxFQUFFO1FBQ3JELE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN0RCxNQUFNLFNBQVMsR0FBRyxJQUFJLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNwRSxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQzVCO0lBRUQsT0FBTyxVQUFVLENBQUM7QUFDcEIsQ0FBQztBQUVELGdCQUFnQjtBQUNoQixNQUFNLENBQUMsS0FBSyxVQUFVLGVBQWUsQ0FBQyxFQUFLLEVBQUMsVUFBaUIsRUFBQyxRQUFlO0lBQzNFLE1BQU0saUJBQWlCLENBQUMsRUFBRSxFQUFDLFVBQVUsRUFBQyxRQUFRLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBRUQsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsZUFBZSxDQUFDLEVBQUs7SUFDekMsTUFBTSxlQUFlLEdBQWtDLE1BQU0sa0JBQWtCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEYsTUFBTSxTQUFTLEdBQUcsTUFBTSxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUMsZUFBZSxDQUFDLENBQUM7SUFDN0QsTUFBTSxlQUFlLENBQUMsRUFBRSxFQUFDLFNBQVMsRUFBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQU1ILE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUs7SUFDNUIseURBQXlEO0lBQ3pELE1BQU0sS0FBSyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7SUFDekIsTUFBTSxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUN6QixNQUFNLGNBQWMsR0FBRyxDQUFDLEtBQUssR0FBQyxDQUFDLEtBQUssQ0FBQztJQUNyQyxFQUFFLENBQUMsTUFBTSxDQUFDLHdCQUF3QixHQUFFLGNBQWMsR0FBRyxLQUFLLENBQUMsQ0FBQTtJQUUzRCwrR0FBK0c7SUFDL0csSUFBRyxDQUFDLE1BQU0sb0JBQW9CLENBQUMsRUFBRSxDQUFDLEVBQUM7UUFBQyxNQUFNLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUFDO0lBQzVELEVBQUUsQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUMsQ0FBQTtJQUVuQyxrRUFBa0U7SUFDbEUsSUFBRyxDQUFDLE1BQU0sZ0JBQWdCLENBQUMsRUFBRSxDQUFDLEVBQUM7UUFBQyxNQUFNLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUFDO0lBQ3pELEVBQUUsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtBQUNoQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IGdsb2JhbEZpbGVzIH0gZnJvbSBcIi9saWIvY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IHNlcnZlck9iamVjdCB9IGZyb20gXCIvY2xhc3Nlcy9jbGFzc1NlcnZlclwiO1xyXG5pbXBvcnQgeyBzdHJpbmdpZnlBbmRXcml0ZSB9IGZyb20gXCIvbGliL2hlbHBlcnNcIjtcclxuaW1wb3J0IHsgYWxsUHJvZ3Jlc3NGbGFnc1RydWUsIGNyYWNrU2VydmVycyB9IGZyb20gXCIvbWFuYWdlcnMvc2VydmVyTWFuYWdlbWVudC9jcmFja1NlcnZlcnNcIjtcclxuaW1wb3J0IHsgYWxsU2VydmVyc1Jvb3RlZCwgcm9vdFdoYXRXZUNhbiB9IGZyb20gXCIvbWFuYWdlcnMvc2VydmVyTWFuYWdlbWVudC9yb290U2VydmVyc1wiO1xyXG5cclxuLyoqIFRoZW9yZXRpY2FsIFJBTSBDb3N0OiAzLjggR0IgKi9cclxuXHJcblxyXG4vKiogQFJBTSAwLjIgR0IgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFNlcnZlclN0cnVjdHVyZShuczpOUyk6UHJvbWlzZTxNYXA8c3RyaW5nLCBzdHJpbmcgfCB1bmRlZmluZWQ+PiB7XHJcbiAgICAvKiogSW5pdGlhbCBydW4gdmFyaWFibGUgc2V0dXAsIHdlIHdhbnQgdG8gc3RhcnQgZnJvbSBcImhvbWVcIiwgYW5kIGZvbGxvdyB0aGUgbmV0d29yayBmcm9tIHRoZXJlLlxyXG4gICAgICogIFNpbmNlIGhvbWUgaXMgdGhlIGJhc2UgbGV2ZWwsIGl0J3MgcGFyZW50IHdpbGwgYmUgbnVsbC4gU2F2aW5nIHBhcmVudHMgZm9yIHBvc3NpYmxlIGJhY2tkb29yXHJcbiAgICAgKiAgc2hlbm5hbmlnYW5zIGxhdGVyLlxyXG4gICAgICovXHJcblxyXG4gICAgY29uc3Qgc3RhcnRpbmdTZXJ2ZXIgPSBcImhvbWVcIjtcclxuICAgIGNvbnN0IGRpc2NvdmVyZWRTZXJ2ZXJzOk1hcDxzdHJpbmcsc3RyaW5nIHwgIHVuZGVmaW5lZD4gPSBuZXcgTWFwKCk7XHJcbiAgICBkaXNjb3ZlcmVkU2VydmVycy5zZXQoc3RhcnRpbmdTZXJ2ZXIsIHVuZGVmaW5lZCk7XHJcblxyXG4gICAgLy8gRnVuY3Rpb24gdG8gcmVjdXJzaXZlbHkgZGlzY292ZXIgc2VydmVyc1xyXG4gICAgYXN5bmMgZnVuY3Rpb24gZGlzY292ZXJTZXJ2ZXJzKHNlcnZlcjpzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBhZGphY2VudFNlcnZlcnM6c3RyaW5nW10gPSBucy5zY2FuKHNlcnZlcik7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3Qgc2VydmVyTmFtZSBvZiBhZGphY2VudFNlcnZlcnMpIHtcclxuICAgICAgICBpZiAoIWRpc2NvdmVyZWRTZXJ2ZXJzLmhhcyhzZXJ2ZXJOYW1lKSkge1xyXG4gICAgICAgICAgICBkaXNjb3ZlcmVkU2VydmVycy5zZXQoc2VydmVyTmFtZSwgc2VydmVyKTsgLy8gU3RvcmUgdGhlIHNlcnZlciB0aGF0IGRpc2NvdmVyZWQgaXRcclxuICAgICAgICAgICAgYXdhaXQgZGlzY292ZXJTZXJ2ZXJzKHNlcnZlck5hbWUpOyAvLyBSZWN1cnNpdmUgY2FsbCB0byBkaXNjb3ZlciBhZGphY2VudCBzZXJ2ZXJzXHJcbiAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGF3YWl0IGRpc2NvdmVyU2VydmVycyhzdGFydGluZ1NlcnZlcik7XHJcbiAgICByZXR1cm4gZGlzY292ZXJlZFNlcnZlcnM7XHJcbn1cclxuXHJcbi8qKiBAUkFNIDIgR0IgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFsbFNlcnZlckluZm8obnM6IE5TLCBzZXJ2ZXJNYXA6IE1hcDxzdHJpbmcsIHN0cmluZyB8IHVuZGVmaW5lZD4pOlByb21pc2U8QXJyYXk8c2VydmVyT2JqZWN0Pj4ge1xyXG4gICAgY29uc3QgYWxsU2VydmVyczogQXJyYXk8c2VydmVyT2JqZWN0PiA9IFtdO1xyXG4gIFxyXG4gICAgZm9yIChjb25zdCBbY3VycmVudFNlcnZlciwgcGFyZW50U2VydmVyXSBvZiBzZXJ2ZXJNYXApIHtcclxuICAgICAgY29uc3QgY3VycmVudFNlcnZlckluZm8gPSBucy5nZXRTZXJ2ZXIoY3VycmVudFNlcnZlcik7XHJcbiAgICAgIGNvbnN0IHNlcnZlck9iaiA9IG5ldyBzZXJ2ZXJPYmplY3QoY3VycmVudFNlcnZlckluZm8sIHBhcmVudFNlcnZlcik7XHJcbiAgICAgIGFsbFNlcnZlcnMucHVzaChzZXJ2ZXJPYmopO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhbGxTZXJ2ZXJzO1xyXG4gIH1cclxuICBcclxuICAvKiogQFJBTSAwIEdCICovXHJcbiAgZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0b3JlU2VydmVyRGF0YShuczpOUyxzZXJ2ZXJEYXRhOm9iamVjdCxmaWxlUGF0aDpzdHJpbmcpOlByb21pc2U8dm9pZD4ge1xyXG4gICAgYXdhaXQgc3RyaW5naWZ5QW5kV3JpdGUobnMsc2VydmVyRGF0YSxmaWxlUGF0aCk7XHJcbiAgfVxyXG5cclxuICAvKiogQFJBTSAyLjIgR0IgKi9cclxuICBleHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlU2VydmVyTWFwKG5zOk5TKTpQcm9taXNlPHZvaWQ+e1xyXG4gICAgY29uc3Qgc2VydmVyU3RydWN0dXJlOk1hcDxzdHJpbmcsc3RyaW5nIHwgdW5kZWZpbmVkPiA9IGF3YWl0IGdldFNlcnZlclN0cnVjdHVyZShucyk7XHJcbiAgICBjb25zdCBzZXJ2ZXJNYXAgPSBhd2FpdCBnZXRBbGxTZXJ2ZXJJbmZvKG5zLHNlcnZlclN0cnVjdHVyZSk7XHJcbiAgICBhd2FpdCBzdG9yZVNlcnZlckRhdGEobnMsc2VydmVyTWFwLGdsb2JhbEZpbGVzLnNlcnZlck1hcCk7XHJcbiAgfVxyXG4gIFxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6TlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIC8qKiBHZXQgdGhlIHNlcnZlciBzdHJ1Y3R1cmUsIGFuZCB1cGRhdGUgdGhlIHNlcnZlck1hcCAqL1xyXG4gICAgY29uc3QgdGltZTEgPSBuZXcgRGF0ZSgpO1xyXG4gICAgYXdhaXQgdXBkYXRlU2VydmVyTWFwKG5zKTtcclxuICAgIGNvbnN0IHRpbWUyID0gbmV3IERhdGUoKTtcclxuICAgIGNvbnN0IHRpbWVEaWZmZXJlbmNlID0gK3RpbWUyLSt0aW1lMTtcclxuICAgIG5zLnRwcmludChcIlNlcnZlciBNYXAgVXBkYXRlZCBpbiBcIisgdGltZURpZmZlcmVuY2UgKyBcIiBtc1wiKVxyXG5cclxuICAgIC8qKiBTZWUgaWYgYWxsIHNlcnZlcnMgYXJlIGNyYWNrZWQsIGlmIG5vdCwgY3JhY2sgd2hhdCB3ZSBjYW4uIExhdGVyIHdlJ2xsIGluY29ycG9yYXRlIGJ1eWluZyBtaXNzaW5nIHRvb2xzLiAqL1xyXG4gICAgaWYoIWF3YWl0IGFsbFByb2dyZXNzRmxhZ3NUcnVlKG5zKSl7YXdhaXQgY3JhY2tTZXJ2ZXJzKG5zKTt9XHJcbiAgICBucy50cHJpbnQoXCJQcm9ncmVzcyBGbGFncyBVcGRhdGVkXCIpXHJcblxyXG4gICAgLyoqIE5leHQsIGxldCdzIHNlZSB3aGF0IHdlIG5lZWQgdG8gcm9vdCwgYW5kIHJvb3QgaWYgcG9zc2libGUuICovXHJcbiAgICBpZighYXdhaXQgYWxsU2VydmVyc1Jvb3RlZChucykpe2F3YWl0IHJvb3RXaGF0V2VDYW4obnMpO31cclxuICAgIG5zLnRwcmludChcIlNlcnZlcnMgcm9vdGVkLlwiKVxyXG59Il19