import { globalFiles } from "/lib/constants";
import { serverObject } from "/classes/classServer";
import { stringifyAndWrite } from "/lib/helpers";
/** Theoretical RAM Cost: 3.8 GB */
/** @RAM 0.2 GB */
async function getServerStructure(ns) {
    /** Initial run variable setup, we want to start from "home", and follow the network from there.
     *  Since home is the base level, it's parent will be null. Saving parents for possible backdoor
     *  shennanigans later.
     */
    const startingServer = "home";
    const discoveredServers = new Map();
    discoveredServers.set(startingServer, undefined);
    // Function to recursively discover servers
    async function discoverServers(server) {
        const adjacentServers = ns.scan(server);
        for (const serverName of adjacentServers) {
            if (!discoveredServers.has(serverName)) {
                discoveredServers.set(serverName, server); // Store the server that discovered it
                await discoverServers(serverName); // Recursive call to discover adjacent servers
            }
        }
    }
    await discoverServers(startingServer);
    return discoveredServers;
}
/** @RAM 2 GB */
async function getAllServerInfo(ns, serverMap) {
    const allServers = [];
    for (const [currentServer, parentServer] of serverMap) {
        const currentServerInfo = ns.getServer(currentServer);
        const serverObj = new serverObject(currentServerInfo, parentServer);
        allServers.push(serverObj);
    }
    return allServers;
}
/** @RAM 0 GB */
async function storeServerData(ns, serverData, filePath) {
    await stringifyAndWrite(ns, serverData, filePath);
}
export async function main(ns) {
    /** Get the server structure */
    const serverStructure = await getServerStructure(ns);
    const serverMap = await getAllServerInfo(ns, serverStructure);
    await storeServerData(ns, serverMap, globalFiles.serverMap);
    /** Now we have all servers and their current information, now let's make the lists
     * of those that need cracking. First, let's see if we need to crack anything.*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYW5hZ2Vycy9zZXJ2ZXJNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBSWpELG1DQUFtQztBQUduQyxrQkFBa0I7QUFDbEIsS0FBSyxVQUFVLGtCQUFrQixDQUFDLEVBQUs7SUFDbkM7OztPQUdHO0lBRUgsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDO0lBQzlCLE1BQU0saUJBQWlCLEdBQW1DLElBQUksR0FBRyxFQUFFLENBQUM7SUFDcEUsaUJBQWlCLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUVqRCwyQ0FBMkM7SUFDM0MsS0FBSyxVQUFVLGVBQWUsQ0FBQyxNQUFhO1FBQ3hDLE1BQU0sZUFBZSxHQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFakQsS0FBSyxNQUFNLFVBQVUsSUFBSSxlQUFlLEVBQUU7WUFDMUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDcEMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLHNDQUFzQztnQkFDakYsTUFBTSxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyw4Q0FBOEM7YUFDcEY7U0FDQTtJQUNMLENBQUM7SUFDRCxNQUFNLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN0QyxPQUFPLGlCQUFpQixDQUFDO0FBQzdCLENBQUM7QUFFRCxnQkFBZ0I7QUFDaEIsS0FBSyxVQUFVLGdCQUFnQixDQUFDLEVBQU0sRUFBRSxTQUEwQztJQUM5RSxNQUFNLFVBQVUsR0FBd0IsRUFBRSxDQUFDO0lBRTNDLEtBQUssTUFBTSxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsSUFBSSxTQUFTLEVBQUU7UUFDckQsTUFBTSxpQkFBaUIsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sU0FBUyxHQUFHLElBQUksWUFBWSxDQUFDLGlCQUFpQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3BFLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDNUI7SUFFRCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDO0FBRUQsZ0JBQWdCO0FBQ2hCLEtBQUssVUFBVSxlQUFlLENBQUMsRUFBSyxFQUFDLFVBQWlCLEVBQUMsUUFBZTtJQUNwRSxNQUFNLGlCQUFpQixDQUFDLEVBQUUsRUFBQyxVQUFVLEVBQUMsUUFBUSxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQU1ILE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUs7SUFDNUIsK0JBQStCO0lBQy9CLE1BQU0sZUFBZSxHQUFrQyxNQUFNLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BGLE1BQU0sU0FBUyxHQUFHLE1BQU0sZ0JBQWdCLENBQUMsRUFBRSxFQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzdELE1BQU0sZUFBZSxDQUFDLEVBQUUsRUFBQyxTQUFTLEVBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTFEO29GQUNnRjtBQUNwRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IGdsb2JhbEZpbGVzIH0gZnJvbSBcIi9saWIvY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IHNlcnZlck9iamVjdCB9IGZyb20gXCIvY2xhc3Nlcy9jbGFzc1NlcnZlclwiO1xyXG5pbXBvcnQgeyBzdHJpbmdpZnlBbmRXcml0ZSB9IGZyb20gXCIvbGliL2hlbHBlcnNcIjtcclxuaW1wb3J0IHsgYnVpbGRUb29sS2l0IH0gZnJvbSBcIi9tYW5hZ2Vycy9zZXJ2ZXJNYW5hZ2VtZW50L2J1aWxkVG9vbEtpdFwiO1xyXG5pbXBvcnQgeyB0b29sS2l0IH0gZnJvbSBcIi9jbGFzc2VzL3Rvb2xLaXRcIjtcclxuXHJcbi8qKiBUaGVvcmV0aWNhbCBSQU0gQ29zdDogMy44IEdCICovXHJcblxyXG5cclxuLyoqIEBSQU0gMC4yIEdCICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdldFNlcnZlclN0cnVjdHVyZShuczpOUyk6UHJvbWlzZTxNYXA8c3RyaW5nLCBzdHJpbmcgfCB1bmRlZmluZWQ+PiB7XHJcbiAgICAvKiogSW5pdGlhbCBydW4gdmFyaWFibGUgc2V0dXAsIHdlIHdhbnQgdG8gc3RhcnQgZnJvbSBcImhvbWVcIiwgYW5kIGZvbGxvdyB0aGUgbmV0d29yayBmcm9tIHRoZXJlLlxyXG4gICAgICogIFNpbmNlIGhvbWUgaXMgdGhlIGJhc2UgbGV2ZWwsIGl0J3MgcGFyZW50IHdpbGwgYmUgbnVsbC4gU2F2aW5nIHBhcmVudHMgZm9yIHBvc3NpYmxlIGJhY2tkb29yXHJcbiAgICAgKiAgc2hlbm5hbmlnYW5zIGxhdGVyLlxyXG4gICAgICovXHJcblxyXG4gICAgY29uc3Qgc3RhcnRpbmdTZXJ2ZXIgPSBcImhvbWVcIjtcclxuICAgIGNvbnN0IGRpc2NvdmVyZWRTZXJ2ZXJzOk1hcDxzdHJpbmcsc3RyaW5nIHwgIHVuZGVmaW5lZD4gPSBuZXcgTWFwKCk7XHJcbiAgICBkaXNjb3ZlcmVkU2VydmVycy5zZXQoc3RhcnRpbmdTZXJ2ZXIsIHVuZGVmaW5lZCk7XHJcblxyXG4gICAgLy8gRnVuY3Rpb24gdG8gcmVjdXJzaXZlbHkgZGlzY292ZXIgc2VydmVyc1xyXG4gICAgYXN5bmMgZnVuY3Rpb24gZGlzY292ZXJTZXJ2ZXJzKHNlcnZlcjpzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBhZGphY2VudFNlcnZlcnM6c3RyaW5nW10gPSBucy5zY2FuKHNlcnZlcik7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3Qgc2VydmVyTmFtZSBvZiBhZGphY2VudFNlcnZlcnMpIHtcclxuICAgICAgICBpZiAoIWRpc2NvdmVyZWRTZXJ2ZXJzLmhhcyhzZXJ2ZXJOYW1lKSkge1xyXG4gICAgICAgICAgICBkaXNjb3ZlcmVkU2VydmVycy5zZXQoc2VydmVyTmFtZSwgc2VydmVyKTsgLy8gU3RvcmUgdGhlIHNlcnZlciB0aGF0IGRpc2NvdmVyZWQgaXRcclxuICAgICAgICAgICAgYXdhaXQgZGlzY292ZXJTZXJ2ZXJzKHNlcnZlck5hbWUpOyAvLyBSZWN1cnNpdmUgY2FsbCB0byBkaXNjb3ZlciBhZGphY2VudCBzZXJ2ZXJzXHJcbiAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGF3YWl0IGRpc2NvdmVyU2VydmVycyhzdGFydGluZ1NlcnZlcik7XHJcbiAgICByZXR1cm4gZGlzY292ZXJlZFNlcnZlcnM7XHJcbn1cclxuXHJcbi8qKiBAUkFNIDIgR0IgKi9cclxuYXN5bmMgZnVuY3Rpb24gZ2V0QWxsU2VydmVySW5mbyhuczogTlMsIHNlcnZlck1hcDogTWFwPHN0cmluZywgc3RyaW5nIHwgdW5kZWZpbmVkPik6UHJvbWlzZTxBcnJheTxzZXJ2ZXJPYmplY3Q+PiB7XHJcbiAgICBjb25zdCBhbGxTZXJ2ZXJzOiBBcnJheTxzZXJ2ZXJPYmplY3Q+ID0gW107XHJcbiAgXHJcbiAgICBmb3IgKGNvbnN0IFtjdXJyZW50U2VydmVyLCBwYXJlbnRTZXJ2ZXJdIG9mIHNlcnZlck1hcCkge1xyXG4gICAgICBjb25zdCBjdXJyZW50U2VydmVySW5mbyA9IG5zLmdldFNlcnZlcihjdXJyZW50U2VydmVyKTtcclxuICAgICAgY29uc3Qgc2VydmVyT2JqID0gbmV3IHNlcnZlck9iamVjdChjdXJyZW50U2VydmVySW5mbywgcGFyZW50U2VydmVyKTtcclxuICAgICAgYWxsU2VydmVycy5wdXNoKHNlcnZlck9iaik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFsbFNlcnZlcnM7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKiBAUkFNIDAgR0IgKi9cclxuICBhc3luYyBmdW5jdGlvbiBzdG9yZVNlcnZlckRhdGEobnM6TlMsc2VydmVyRGF0YTpvYmplY3QsZmlsZVBhdGg6c3RyaW5nKTpQcm9taXNlPHZvaWQ+IHtcclxuICAgIGF3YWl0IHN0cmluZ2lmeUFuZFdyaXRlKG5zLHNlcnZlckRhdGEsZmlsZVBhdGgpO1xyXG4gIH1cclxuICBcclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOk5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAvKiogR2V0IHRoZSBzZXJ2ZXIgc3RydWN0dXJlICovXHJcbiAgICBjb25zdCBzZXJ2ZXJTdHJ1Y3R1cmU6TWFwPHN0cmluZyxzdHJpbmcgfCB1bmRlZmluZWQ+ID0gYXdhaXQgZ2V0U2VydmVyU3RydWN0dXJlKG5zKTtcclxuICAgIGNvbnN0IHNlcnZlck1hcCA9IGF3YWl0IGdldEFsbFNlcnZlckluZm8obnMsc2VydmVyU3RydWN0dXJlKTtcclxuICAgIGF3YWl0IHN0b3JlU2VydmVyRGF0YShucyxzZXJ2ZXJNYXAsZ2xvYmFsRmlsZXMuc2VydmVyTWFwKTtcclxuXHJcbiAgICAvKiogTm93IHdlIGhhdmUgYWxsIHNlcnZlcnMgYW5kIHRoZWlyIGN1cnJlbnQgaW5mb3JtYXRpb24sIG5vdyBsZXQncyBtYWtlIHRoZSBsaXN0c1xyXG4gICAgICogb2YgdGhvc2UgdGhhdCBuZWVkIGNyYWNraW5nLiBGaXJzdCwgbGV0J3Mgc2VlIGlmIHdlIG5lZWQgdG8gY3JhY2sgYW55dGhpbmcuKi9cclxufSJdfQ==