import { buildToolKit } from "/managers/serverManagement/buildToolKit";
import { readAndParse, stringifyAndWrite } from "/lib/helpers";
import { globalFiles } from "/lib/constants";
import { updateServerMap } from "/managers/serverManager";
import { getFilteredServerMap } from "/managers/serverManagement/serverHelpers";
/** @RAM 0 GB */
async function getCurrentServerStates(ns) {
    const curServerMap = await readAndParse(ns, globalFiles.serverMap);
    return curServerMap;
}
/** @RAM 0 GB */
export async function allProgressFlagsTrue(ns) {
    const allFlags = await getProgressFlags(ns);
    ns.tprint("Got flags.");
    const allFlagsValues = Object.values(allFlags);
    ns.tprint("Got values.");
    return allFlagsValues.every((value) => value === true);
}
/** @RAM 0 GB */
async function getProgressFlags(ns) {
    try {
        const curProgressFlags = await readAndParse(ns, globalFiles.progressFlags);
        return curProgressFlags;
    }
    catch {
        const curProgressFlags = { allBruteSSH: false, allFTPCrack: false, allHTTPWorm: false, allRelaySMTP: false, allSQLInject: false };
        return curProgressFlags;
    }
}
/** @RAM 2.2 GB */
async function updateProgressFlags(ns, toolBox) {
    await updateServerMap(ns);
    const curProgressFlags = await getProgressFlags(ns);
    const curServerMap = await getCurrentServerStates(ns);
    for (const tool of toolBox) {
        const filteredMap = getFilteredServerMap(curServerMap, tool.portFlag, '===', false);
        if (filteredMap.length === 0) {
            curProgressFlags[convertProgramToFlagProp(tool.Program)] = true ?? false;
        }
    }
    await stringifyAndWrite(ns, curProgressFlags, globalFiles.progressFlags);
}
/** @RAM 0.25 GB */
async function applyAvailableTools(ns, toolBox, serverMap, progressFlags) {
    for (const tool of toolBox) {
        if (!areWeDoneWithThis(progressFlags, convertProgramToFlagProp(tool.Program))) {
            const filteredMap = getFilteredServerMap(serverMap, tool.portFlag, '===', false);
            filteredMap.forEach((filteredServer) => tool.useTool(ns, tool.Command, filteredServer.hostName));
        }
    }
}
/** @RAM 0 GB */
function convertProgramToFlagProp(programName) {
    return "all" + programName;
}
/** @RAM 0 GB */
function areWeDoneWithThis(progressFlags, programName) {
    return progressFlags[programName];
}
/** @RAM 2.45 GB (0.25 from class Toolbox, 2.2 from updateServerMap) */
export async function crackServers(ns) {
    const curServerMap = await getCurrentServerStates(ns);
    const toolBox = await buildToolKit(ns);
    await updateProgressFlags(ns, toolBox);
    const curProgressFlags = await getProgressFlags(ns);
    await applyAvailableTools(ns, toolBox, curServerMap, curProgressFlags);
    await updateProgressFlags(ns, toolBox);
}
//# sourceMappingURL=data:application/json;base64,