import { toolKit } from "/classes/toolKit";
import { globalFiles, hackingTools, homeServer } from "/lib/constants";
import { stringifyAndWrite } from "/managers/modules/helpers";
export class toolBox {
    toolBox;
    constructor() {
        const tempBox = [];
        for (const key in hackingTools) {
            const data = hackingTools[key];
            tempBox.push(new toolKit(data, false));
        }
        this.toolBox = tempBox;
    }
    *[Symbol.iterator]() {
        for (const tool of this.toolBox) {
            yield tool;
        }
    }
    async updateToolBox(ns) {
        for (const tool of this.toolBox) {
            if (!tool.purchasedTool) {
                if (await ns.fileExists(tool.Program, homeServer)) {
                    tool.purchasedTool = true;
                }
            }
        }
        await stringifyAndWrite(ns, this, globalFiles.availableTools);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbEJveC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGFzc2VzL3Rvb2xCb3gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRTlELE1BQU0sT0FBTyxPQUFPO0lBQ2hCLE9BQU8sQ0FBVztJQUVsQjtRQUNJLE1BQU0sT0FBTyxHQUFjLEVBQUUsQ0FBQztRQUM5QixLQUFLLE1BQU0sR0FBRyxJQUFJLFlBQVksRUFBRTtZQUM1QixNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDL0IsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUN6QztRQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzNCLENBQUM7SUFFRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNkLEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUM3QixNQUFNLElBQUksQ0FBQztTQUNkO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxhQUFhLENBQUMsRUFBSztRQUM1QixLQUFJLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUM7WUFDM0IsSUFBRyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUM7Z0JBQ25CLElBQUcsTUFBTSxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsVUFBVSxDQUFDLEVBQUM7b0JBQzVDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO2lCQUM3QjthQUNKO1NBQ0o7UUFDRCxNQUFNLGlCQUFpQixDQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFBO0lBQy9ELENBQUM7Q0ErQkoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgdG9vbEtpdCB9IGZyb20gXCIvY2xhc3Nlcy90b29sS2l0XCI7XHJcbmltcG9ydCB7IGdsb2JhbEZpbGVzLCBoYWNraW5nVG9vbHMsIGhvbWVTZXJ2ZXIgfSBmcm9tIFwiL2xpYi9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgc3RyaW5naWZ5QW5kV3JpdGUgfSBmcm9tIFwiL21hbmFnZXJzL21vZHVsZXMvaGVscGVyc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIHRvb2xCb3h7XHJcbiAgICB0b29sQm94OnRvb2xLaXRbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIGNvbnN0IHRlbXBCb3g6IHRvb2xLaXRbXSA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGhhY2tpbmdUb29scykge1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gaGFja2luZ1Rvb2xzW2tleV07XHJcbiAgICAgICAgICAgIHRlbXBCb3gucHVzaChuZXcgdG9vbEtpdChkYXRhLGZhbHNlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudG9vbEJveCA9IHRlbXBCb3g7XHJcbiAgICB9XHJcbiAgICBcclxuICAgICpbU3ltYm9sLml0ZXJhdG9yXSgpOiBJdGVyYWJsZUl0ZXJhdG9yPHRvb2xLaXQ+IHtcclxuICAgICAgICBmb3IgKGNvbnN0IHRvb2wgb2YgdGhpcy50b29sQm94KSB7XHJcbiAgICAgICAgICAgIHlpZWxkIHRvb2w7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyB1cGRhdGVUb29sQm94KG5zOk5TKXtcclxuICAgICAgICBmb3IoY29uc3QgdG9vbCBvZiB0aGlzLnRvb2xCb3gpe1xyXG4gICAgICAgICAgICBpZighdG9vbC5wdXJjaGFzZWRUb29sKXtcclxuICAgICAgICAgICAgICAgIGlmKGF3YWl0IG5zLmZpbGVFeGlzdHModG9vbC5Qcm9ncmFtLGhvbWVTZXJ2ZXIpKXtcclxuICAgICAgICAgICAgICAgICAgICB0b29sLnB1cmNoYXNlZFRvb2wgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF3YWl0IHN0cmluZ2lmeUFuZFdyaXRlKG5zLHRoaXMsZ2xvYmFsRmlsZXMuYXZhaWxhYmxlVG9vbHMpXHJcbiAgICB9XHJcblxyXG4gICAgXHJcbi8vIHB1YmxpYyBzdGF0aWMgaW5pdGlhbGl6ZVRvb2xib3goKTogdG9vbEtpdFtdIHtcclxuLy8gICAgIGNvbnN0IHRvb2xCb3g6IHRvb2xLaXRbXSA9IFtdO1xyXG4vLyAgICAgZm9yIChjb25zdCBrZXkgaW4gaGFja2luZ1Rvb2xzKSB7XHJcbi8vICAgICAgICAgY29uc3QgZGF0YSA9IGhhY2tpbmdUb29sc1trZXldO1xyXG4vLyAgICAgICAgIHRvb2xCb3gucHVzaChuZXcgdG9vbEtpdChkYXRhLGZhbHNlKSk7XHJcbi8vICAgICB9XHJcbi8vICAgICByZXR1cm4gdG9vbEJveDtcclxuLy8gfVxyXG5cclxuICAgIFxyXG5cclxuICAgIC8qKiBAcmVtYXJrcyBSQU06IDAuMSBHQiAqL1xyXG4vLyAgICAgYXN5bmMgZnVuY3Rpb24gZ2V0QXZhaWxhYmxlVG9vbHMobnM6IE5TKTogUHJvbWlzZTxBcnJheTxvYmplY3Q+PiB7XHJcbi8vICAgICBjb25zdCBhdmFpbGFibGVUb29sczogQXJyYXk8b2JqZWN0PiA9IFtdO1xyXG4vLyAgICAgZm9yIChjb25zdCB0b29sIGluIGhhY2tpbmdUb29scykge1xyXG4vLyAgICAgICBjb25zdCBjdXJyZW50VG9vbDogc3RyaW5nID0gaGFja2luZ1Rvb2xzW3Rvb2xdLlByb2dyYW07XHJcbi8vICAgICAgIGlmIChhd2FpdCBucy5maWxlRXhpc3RzKGN1cnJlbnRUb29sLCBcImhvbWVcIikpIHtcclxuLy8gICAgICAgICBhdmFpbGFibGVUb29scy5wdXNoKGhhY2tpbmdUb29sc1t0b29sXSk7XHJcbi8vICAgICAgIH1cclxuLy8gICAgIH1cclxuLy8gICAgIHJldHVybiBhdmFpbGFibGVUb29scztcclxuLy8gICB9XHJcbiAgXHJcbiAgICAvKiogQHJlbWFya3MgUkFNIDAuMUdCICovXHJcbi8vICAgICBleHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlQXZhaWxhYmxlVG9vbHMobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbi8vICAgICBjb25zdCBhdmFpbGFibGVUb29sczogQXJyYXk8b2JqZWN0PiA9IGF3YWl0IGdldEF2YWlsYWJsZVRvb2xzKG5zKTtcclxuLy8gICAgIGF3YWl0IHN0cmluZ2lmeUFuZFdyaXRlKG5zLCBhdmFpbGFibGVUb29scywgZ2xvYmFsRmlsZXMuYXZhaWxhYmxlVG9vbHMpO1xyXG4vLyAgIH1cclxufSJdfQ==